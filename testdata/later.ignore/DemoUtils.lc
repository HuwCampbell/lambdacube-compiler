module DemoUtils
    ( module DemoUtils
    , module Prelude
    ) where

time = Uniform "Time" :: Float

--v3v4 = PrimV3FToV4F

-- example combinators
image color = FrameBuffer (DepthImage @1 1000.0, ColorImage @1 color)

triangleRasterCtx = TriangleCtx CullNone PolygonFill NoOffset LastVertex
colorFragmentCtx = accumulationContext (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

rasterizeWith = Rasterize
triangles = triangleRasterCtx

cubeVertexStream = fetch "stream4" (Attribute "position4" :: ((Vec 4 Float)))
mapFragments s fs bg = accumulate colorFragmentCtx PassAll (FragmentShaderRastDepth $ \((a)) -> ((fs a))) s bg
transform s f =  Transform (\v -> VertexOut (f v) 1.0 () (Smooth v)) s

cube v f bg = (cubeVertexStream         -- cube vertices
    `transform`    v    -- scale them
     &             rasterizeWith triangles  -- rasterize
    `mapFragments` f) bg



withCoords f a = f (a%x) (a%y)

fragmentTest f =   quadVertexStream
    `transformQ`    id
     &             rasterizeWith triangles
    `mapFragmentsQ` withCoords f
  where
    clearQ = FrameBuffer $ ColorImage @1 $ V4 1 0 0 0.5

    colorFragmentCtxQ = accumulationContext ((ColorOp NoBlending (V4 True True True True)))
    mapFragmentsQ s fs = accumulate colorFragmentCtxQ PassAll (FragmentShader $ \((a)) -> ((fs a))) s clearQ

    quadVertexStream = fetch "quad" Triangle (Attribute "position" :: Vec 2 Float)

    tr :: Vec 2 Float -> Vec 4 Float
    tr a = V4 a%x a%y 1 1

    transformQ s f =  Transform (\v -> VertexOut (tr $ f v ) 1 () (Smooth v)) s
    
