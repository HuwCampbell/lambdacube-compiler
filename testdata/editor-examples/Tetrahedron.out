Pipeline
  { info = "generated by lambdcube-compiler 0.5.0.0"
  , backend = OpenGL33
  , textures = []
  , samplers = []
  , targets =
      [ RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth , targetRef = Just (Framebuffer Depth) }
              , TargetItem
                  { targetSemantic = Color , targetRef = Just (Framebuffer Color) }
              ]
          }
      ]
  , programs =
      [ Program
          { programUniforms =
              fromList [ ( "MVP" , M44F ) , ( "Time" , Float ) ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "attribute_0" , ty = V4F } ) ]
          , programInTextures = fromList []
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s, vec2 uv){return texture(s,uv);}
              uniform mat4 MVP ;
              in vec4 vi1 ;
              smooth out vec4 vo1 ;
              void main() {
              gl_Position = ((MVP) * (vi1)) * (vec4 (0.5,0.5,0.5,1.0));
              vo1 = vi1;
              }
              
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s, vec2 uv){return texture(s,uv);}
              uniform float Time ;
              smooth in vec4 vo1 ;
              out vec4 f0 ;
              void main() {
              if (!(true)) discard;
              f0 = ((mat4 (vec4 (cos (Time),sin (Time),0.0,0.0)
                          ,vec4 ((0.0) - (sin (Time)),cos (Time),0.0,0.0)
                          ,vec4 (0.0,0.0,1.0,0.0)
                          ,vec4 (0.0,0.0,0.0,1.0))) * ((mat4
                  (vec4 (cos (Time),0.0,(0.0) - (sin (Time)),0.0)
                  ,vec4 (0.0,1.0,0.0,0.0)
                  ,vec4 (sin (Time),0.0,cos (Time),0.0)
                  ,vec4 (0.0,0.0,0.0,1.0))) * (vo1))) * ((mod
                  (((Time) + (sin (Time))) + (sin ((1.1) * (Time)))
                  ,4.0)) * (2.0));
              }
              
              """
          }
      ]
  , slots = []
  , streams =
      [ StreamData
          { streamData =
              fromList
                [ ( "attribute_0"
                  , VFloatArray
                      [ 0.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 0.0
                      , 1.0
                      , 1.0
                      , 0.0
                      , 0.0
                      , 1.0
                      ]
                  )
                ]
          , streamType = fromList [ ( "attribute_0" , V4F ) ]
          , streamPrimitive = Triangles
          , streamPrograms = [ 0 ]
          }
      ]
  , commands =
      [ SetRenderTarget 0
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 0.0 0.0 0.5 1.0) }
          ]
      , SetProgram 0
      , SetRasterContext
          (TriangleCtx CullNone PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderStream 0
      ]
  }