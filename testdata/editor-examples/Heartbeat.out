Pipeline
  { info = "generated by lambdcube-compiler 0.5.0.0"
  , backend = OpenGL33
  , textures =
      [ TextureDescriptor
          { textureType = Texture2D (FloatT Red) 1
          , textureSize = VV2U (V2 128 128)
          , textureSemantic = Depth
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = Repeat
                , samplerWrapT = Nothing
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      , TextureDescriptor
          { textureType = Texture2D (FloatT RGBA) 1
          , textureSize = VV2U (V2 128 128)
          , textureSemantic = Color
          , textureSampler =
              SamplerDescriptor
                { samplerWrapS = Repeat
                , samplerWrapT = Nothing
                , samplerWrapR = Nothing
                , samplerMinFilter = Linear
                , samplerMagFilter = Linear
                , samplerBorderColor = VV4F (V4 0.0 0.0 0.0 1.0)
                , samplerMinLod = Nothing
                , samplerMaxLod = Nothing
                , samplerLodBias = 0.0
                , samplerCompareFunc = Nothing
                }
          , textureBaseLevel = 0
          , textureMaxLevel = 0
          }
      ]
  , samplers = []
  , targets =
      [ RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth , targetRef = Just (Framebuffer Depth) }
              , TargetItem
                  { targetSemantic = Color , targetRef = Just (Framebuffer Color) }
              ]
          }
      , RenderTarget
          { renderTargets =
              [ TargetItem
                  { targetSemantic = Depth
                  , targetRef = Just (TextureImage 0 0 Nothing)
                  }
              , TargetItem
                  { targetSemantic = Color
                  , targetRef = Just (TextureImage 1 0 Nothing)
                  }
              ]
          }
      ]
  , programs =
      [ Program
          { programUniforms = fromList [ ( "Time" , Float ) ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position4" , ty = V4F } )
                , ( "vi2" , Parameter { name = "vertexUV" , ty = V2F } )
                ]
          , programInTextures = fromList []
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s, vec2 uv){return texture(s,uv);}
              in vec4 vi1 ;
              in vec2 vi2 ;
              smooth out vec2 vo1 ;
              void main() {
              gl_Position = (vi1) * (vec4 (1.0,1.0,1.0,1.0));
              vo1 = vec2 ((vi2).x,(1.0) - ((vi2).y));
              }
              
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s, vec2 uv){return texture(s,uv);}
              uniform float Time ;
              smooth in vec2 vo1 ;
              out vec4 f0 ;
              void main() {
              f0 = ((((((vo1).x) - (0.85)) * (((vo1).x) - (0.85))) + ((((vo1).y) - (0.85)) * (((vo1).y) - (0.85)))) + ((5.0e-4) * (sin
                  (((3.0) * (atan
                  (((vo1).x) - (0.85)
                  ,((vo1).y) - (0.85)))) + ((15.0) * (Time)))))) < ((5.0e-3) * (abs
                  ((sin ((Time) * (4.0))) - (0.37)))) ? vec4
                  (0.0
                  ,0.0
                  ,0.5
                  ,1.0) : ((((((vo1).x) - (0.85)) * (((vo1).x) - (0.85))) + ((((vo1).y) - (0.85)) * (((vo1).y) - (0.85)))) + ((2.0e-3) * (sin
                  (((5.0) * (atan
                  (((vo1).x) - (0.85)
                  ,((vo1).y) - (0.85)))) - ((5.0) * (Time)))))) < ((2.0e-2) * (abs
                  ((sin ((Time) * (4.0))) - (0.37)))) ? vec4
                  (0.0
                  ,0.0
                  ,1.0
                  ,1.0) : ((((((vo1).x) - (0.85)) * (((vo1).x) - (0.85))) + ((((vo1).y) - (0.85)) * (((vo1).y) - (0.85)))) + ((2.0e-3) * (sin
                  (((7.0) * (atan
                  (((vo1).x) - (0.85)
                  ,((vo1).y) - (0.85)))) + ((3.0) * (Time)))))) < ((5.0e-2) * (abs
                  ((sin ((Time) * (4.0))) - (0.37)))) ? vec4
                  (1.0,1.0,1.0,1.0) : vec4 (1.0,1.0,0.0,1.0);
              }
              
              """
          }
      , Program
          { programUniforms = fromList [ ( "MVP" , M44F ) ]
          , programStreams =
              fromList
                [ ( "vi1" , Parameter { name = "position4" , ty = V4F } )
                , ( "vi2" , Parameter { name = "vertexUV" , ty = V2F } )
                ]
          , programInTextures = fromList [ ( "s0" , FTexture2D ) ]
          , programOutput = [ Parameter { name = "f0" , ty = V4F } ]
          , vertexShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s, vec2 uv){return texture(s,uv);}
              uniform mat4 MVP ;
              in vec4 vi1 ;
              in vec2 vi2 ;
              smooth out vec2 vo1 ;
              void main() {
              gl_Position = ((MVP) * (vi1)) * (vec4 (0.5,0.5,0.5,1.0));
              vo1 = vi2;
              }
              
              """
          , geometryShader = Nothing
          , fragmentShader =
              """
              #version 330 core
              vec4 texture2D(sampler2D s, vec2 uv){return texture(s,uv);}
              uniform sampler2D s0 ;
              smooth in vec2 vo1 ;
              out vec4 f0 ;
              void main() {
              f0 = texture2D (s0,vo1);
              }
              
              """
          }
      ]
  , slots =
      [ Slot
          { slotName = "stream4"
          , slotStreams =
              fromList [ ( "position4" , V4F ) , ( "vertexUV" , V2F ) ]
          , slotUniforms = fromList [ ( "MVP" , M44F ) , ( "Time" , Float ) ]
          , slotPrimitive = Triangles
          , slotPrograms = [ 0 , 1 ]
          }
      ]
  , streams = []
  , commands =
      [ SetRenderTarget 1
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 1.0 0.0 0.0 1.0) }
          ]
      , SetProgram 0
      , SetRasterContext
          (TriangleCtx CullNone PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      , SetRenderTarget 0
      , ClearRenderTarget
          [ ClearImage { imageSemantic = Depth , clearValue = VFloat 1.0 }
          , ClearImage
              { imageSemantic = Color , clearValue = VV4F (V4 1.0 0.0 0.0 1.0) }
          ]
      , SetProgram 1
      , SetTexture 0 1
      , SetSamplerUniform "s0" 0
      , SetRasterContext
          (TriangleCtx CullNone PolygonFill NoOffset LastVertex)
      , SetAccumulationContext
          AccumulationContext
            { accViewportName = Nothing
            , accOperations =
                [ DepthOp Less True
                , ColorOp NoBlending (VV4B (V4 True True True True))
                ]
            }
      , RenderSlot 0
      ]
  }