cubeNormals :: [Vec 3 Float]
cubeNormals =
        [ V3 0.0 1.0 0.0,           V3 0.0 1.0 0.0,           V3 0.0 1.0 0.0
        , V3 0.0 1.0 0.0,           V3 0.0 1.0 0.0,           V3 0.0 1.0 0.0
        , V3 0.0 (-1.0) 0.0,        V3 0.0 (-1.0) 0.0,        V3 0.0 (-1.0) 0.0
        , V3 0.0 (-1.0) 0.0,        V3 0.0 (-1.0) 0.0,        V3 0.0 (-1.0) 0.0
        , V3 0.0 (-0.0) 1.0,        V3 0.0 (-0.0) 1.0,        V3 0.0 (-0.0) 1.0
        , V3 (-0.0) 0.0 1.0,        V3 (-0.0) 0.0 1.0,        V3 (-0.0) 0.0 1.0
        , V3 (-0.0) (-0.0) (-1.0),  V3 (-0.0) (-0.0) (-1.0),  V3 (-0.0) (-0.0) (-1.0)
        , V3 0.0 0.0 (-1.0),        V3 0.0 0.0 (-1.0),        V3 0.0 0.0 (-1.0)
        , V3 (-1.0) 0.0 0.0,        V3 (-1.0) 0.0 0.0,        V3 (-1.0) 0.0 0.0
        , V3 (-1.0) 0.0 0.0,        V3 (-1.0) 0.0 0.0,        V3 (-1.0) 0.0 0.0
        , V3 1.0 0.0 0.0,           V3 1.0 0.0 0.0,           V3 1.0 0.0 0.0
        , V3 1.0 0.0 0.0,           V3 1.0 0.0 0.0,           V3 1.0 0.0 0.0
        ]

cubeVertices :: [Vec 3 Float]
cubeVertices =
        [ V3 1.0 1.0 1.0,           V3 (-1.0) 1.0 1.0,        V3 (-1.0) 1.0 (-1.0)
        , V3 (-1.0) 1.0 (-1.0),     V3 1.0 1.0 (-1.0),        V3 1.0 1.0 1.0
        , V3 1.0 (-1.0) (-1.0),     V3 (-1.0) (-1.0) (-1.0),  V3 (-1.0) (-1.0) 1.0
        , V3 (-1.0) (-1.0) 1.0,     V3 1.0 (-1.0) 1.0,        V3 1.0 (-1.0) (-1.0)
        , V3 1.0 (-1.0) 1.0,        V3 (-1.0) (-1.0) 1.0,     V3 (-1.0) 1.0 1.0
        , V3 (-1.0) 1.0 1.0,        V3 1.0 1.0 1.0,           V3 1.0 (-1.0) 1.0
        , V3 1.0 1.0 (-1.0),        V3 (-1.0) 1.0 (-1.0),     V3 (-1.0) (-1.0) (-1.0)
        , V3 (-1.0) (-1.0) (-1.0),  V3 1.0 (-1.0) (-1.0),     V3 1.0 1.0 (-1.0)
        , V3 (-1.0) (-1.0) 1.0,     V3 (-1.0) (-1.0) (-1.0),  V3 (-1.0) 1.0 (-1.0)
        , V3 (-1.0) 1.0 (-1.0),     V3 (-1.0) 1.0 1.0,        V3 (-1.0) (-1.0) 1.0
        , V3 1.0 (-1.0) (-1.0),     V3 1.0 (-1.0) 1.0,        V3 1.0 1.0 1.0
        , V3 1.0 1.0 1.0,           V3 1.0 1.0 (-1.0),        V3 1.0 (-1.0) (-1.0)
        ]

cubeVertexStream = fetchArrays Triangle (cubeVertices,cubeNormals)

clear = FrameBuffer $ (DepthImage @1 1000, ColorImage @1 red)   -- ...

triangleRasterCtx = TriangleCtx CullNone PolygonFill NoOffset LastVertex
colorFragmentCtx = AccumulationContext (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

rasterizeWith = Rasterize
triangles = triangleRasterCtx

mapFragments s fs = Accumulate colorFragmentCtx PassAll (\a -> FragmentOutRastDepth $ fs a) s clear
transform s f =  Transform (\(p,n) -> let v = v3FToV4F p in VertexOut (f v) 1 () (Smooth v)) s

rotate' v = (Uniform "MVP" :: Mat 4 4 Float) `PrimMulMatVec` v

main =             cubeVertexStream         -- cube vertices
    `transform`    (scale 0.5 . rotate')    -- scale them
     &             rasterizeWith triangles  -- rasterize
    `mapFragments` id
     &             ScreenOut                --  draw into screen
