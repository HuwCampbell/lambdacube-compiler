data AB = A | B

render fb choice = let
  rasterCtx         = TriangleCtx CullNone PolygonFill NoOffset LastVertex
  mask              = case choice of
                        A -> V4 False True False False
                        B -> V4 True False False False
  fragmentCtx       = AccumulationContext (ColorOp NoBlending mask)
  vertexShader v    = VertexOut v 1.0 () (Smooth v)
  vertexStream      = fetch "stream4" Triangle (Attribute "position4" :: Vec 4 Float)
  primitiveStream   = Transform vertexShader vertexStream
  fragmentStream    = Rasterize rasterCtx primitiveStream
  fragmentShader v  = let res = case choice of
                            A -> V4 0.0 1.0 0.0 1.0
                            B -> V4 1.0 0.0 0.0 1.0
                      in FragmentOut res
  frame             = accumulate fragmentCtx PassAll fragmentShader fragmentStream fb
 in frame

emptyFB = FrameBuffer (colorImage1 (V4 0.0 0.0 1.0 1.0))

main = ScreenOut (foldl' render emptyFB [A,B])
