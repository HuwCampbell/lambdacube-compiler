data AB = A | B

render choice = let
  emptyFB           = FrameBuffer (colorImage1 (V4 0.0 0.0 0.4 1.0))
  rasterCtx         = TriangleCtx CullNone PolygonFill NoOffset LastVertex
  fragmentCtx       = AccumulationContext (ColorOp NoBlending (V4 True True True True))
  vertexShader v    = VertexOut v 1.0 () (Smooth v)
  vertexStream      = fetch "stream4" Triangle (Attribute "position4" :: Vec 4 Float)
  primitiveStream   = Transform vertexShader vertexStream
  fragmentStream    = Rasterize rasterCtx primitiveStream
  fragmentShader v  = let res = case choice of
                            A -> v
                            B -> V4 1.0 0.0 0.0 1.0
                      in FragmentOut res
  frame             = Accumulate fragmentCtx PassAll fragmentShader fragmentStream emptyFB
 in ScreenOut frame

data Out = Out (AB -> Output)

out = Out render

main = let
  Out o = out
  in o A
