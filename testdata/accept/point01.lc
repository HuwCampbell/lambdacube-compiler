
vertices :: [(Vec 3 Float,Vec 4 Float)]
vertices = concat [[v i,v (i+!1.0)] | i <- [(-2)..2]]
  where v x = (V3 x 0.0 0.0,red)
clear = FrameBuffer $ (DepthImage @1 1000, ColorImage @1 navy)   -- ...

lines = LineCtx 1.0 LastVertex
points = PointCtx ProgramPointSize 1.0 LowerLeft

colorFragmentCtx = AccumulationContext (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

cubeVertexStream = fetchArrays Point (unzip vertices)

rasterizeWith = Rasterize

mapFragments s fs = accumulate colorFragmentCtx PassAll (FragmentShaderRastDepth $ \a -> fs a) s clear
transform s f =  Transform (\(p,c) -> let v = v3FToV4F p in VertexOut (f v) 30.0 () (Smooth c)) s

rotate' v = (Uniform "MVP" :: Mat 4 4 Float) *. v

main =             cubeVertexStream         -- cube vertices
    `transform`    (scale 0.5 . rotate')    -- scale them
     &             rasterizeWith points  -- rasterize
    `mapFragments` id
     &             ScreenOut                --  draw into screen
