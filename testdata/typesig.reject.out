focus checkMetas: \(a :: Type) -> (\(b :: Type) -> primFix a b)
  let a = Type in \(c :: Type) -> <<HERE>>
\(a :: Type ~ _a) (b :: _a ~ X) -> typeAnn _a (_rhs X)
------------ trace
'X :: Type
X :: X
case'X :: forall (a :: X -> Type) -> a 'X -> forall (b :: X) -> a b
match'X :: forall (a :: Type -> Type) -> a X -> forall b -> a b -> a b
!focus checkMetas: \(a :: Type) -> (\(b :: Type) -> primFix a b)
  let a = Type in \(c :: Type) -> <<HERE>>
\(a :: Type ~ _a) (b :: _a ~ X) -> typeAnn _a (_rhs X)
------------ tooltips
testdata/typesig.reject.lc 4:6-4:7
    Type | Type | Type | Type | Type
testdata/typesig.reject.lc 4:6-4:11
    Type
testdata/typesig.reject.lc 4:10-4:11
    X
testdata/typesig.reject.lc 6:6-6:7
    _b
testdata/typesig.reject.lc 6:6-7:6
    _c
testdata/typesig.reject.lc 7:5-7:6
    X