type error: can not unify
[32m'Bool[m
with
[32m'String[m

in testdata/language-features/basic-list/listcomp08.reject.lc:1:23:
value = [x | x <- [], "not Bool"]
                      ^^^^^^^^^^

------------ trace
infer:  [47mlabelend (concatMap (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil)[49m[K
infer:  labEnd ([47mconcatMap (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil[49m)[K
infer:  labEnd ([47mconcatMap (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil)[49m Nil)[K
infer:  labEnd ([47mconcatMap[49m (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil)[K
focus:  labEnd ([47m[32mconcatMap[39m[49m (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil)[K
focus:  labEnd ([47m[32mconcatMap[39m[49m {_ : _:'Type} (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil)[K
check:  labEnd ([32mconcatMap[39m {[47m(_ : _:'Type) :: [32mType[39m[49m} (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil)[K
infer:  labEnd ([32mconcatMap[39m {([47m_ : _:'Type[49m) : [32mType[39m} (\([32ma[39m : _:'Type) -> primIfThenElse "not Bool" (Cons a Nil) Nil) Nil)[K
infer:  labEnd ([32mconcatMap[39m {\([34ma[39m : [47m_:'Type[49m)->a : [32mType[39m} (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil) Nil)[K
infer:  labEnd ([32mconcatMap[39m {\([34mb[39m : (\[34ma[39m:[47m'Type[49m -> a))->b : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\([34mb[39m : (\[34ma[39m:[47m[32mType[39m[49m -> a))->b : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
infer:  labEnd ([32mconcatMap[39m {\([34mb[39m : \[34ma[39m->[47ma[49m)->b : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\([34mb[39m : \[34ma[39m->[47m[32ma[39m[49m)->b : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {(\[34ma[39m [34mb[39m:[47m[32ma[39m[49m -> b) : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
infer:  labEnd ([32mconcatMap[39m {(\[34ma[39m [34mb[39m:[32ma[39m -> [47mb[49m) : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {(\[34ma[39m [34mb[39m:[32ma[39m -> [47m[32mb[39m[49m) : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\[34ma[39m [34mb[39m:[32ma[39m -> [47m[32mb[39m[49m:[32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\[34ma[39m [34mb[39m:[32ma[39m -> \([34mc[39m : [32mType~a[39m)->[47m[32mb[39m[49m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\[34ma[39m [34mb[39m:[32ma[39m [34ma[39m:=[32mType[39m -> [47m[32mb[39m[49m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\[34ma[39m [34ma[39m:=[32mType[39m -> \[34mb[39m->[47m[32mb[39m[49m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) Nil)[K
focus:  labEnd ([32mconcatMap[39m {\[34ma[39m->[47m[32ma[39m[49m} (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap[39m {[47m[32ma[39m[49m}) (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil) Nil)[K
focus:  labEnd ((\[34ma[39m -> [47m[32mconcatMap a[39m[49m) (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil) Nil)[K
focus:  labEnd ((\[34ma[39m -> [47m[32mconcatMap a[39m[49m (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [47m[32mconcatMap a[39m[49m {_ : _:'Type} (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil)) Nil)[K
check:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {[47m(_ : _:'Type) :: [32mType[39m[49m} (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil)) Nil)[K
infer:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {([47m_ : _:'Type[49m) : [32mType[39m} (\([32mb[39m : _:'Type) -> primIfThenElse "not Bool" (Cons b Nil) Nil)) Nil)[K
infer:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\([34mb[39m : [47m_:'Type[49m)->b : [32mType[39m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil)) Nil)[K
infer:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\([34mc[39m : (\[34mb[39m:[47m'Type[49m -> b))->c : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\([34mc[39m : (\[34mb[39m:[47m[32mType[39m[49m -> b))->c : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
infer:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\([34mc[39m : \[34mb[39m->[47mb[49m)->c : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\([34mc[39m : \[34mb[39m->[47m[32mb[39m[49m)->c : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {(\[34mb[39m [34mc[39m:[47m[32mb[39m[49m -> c) : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
infer:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {(\[34mb[39m [34mc[39m:[32mb[39m -> [47mc[49m) : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {(\[34mb[39m [34mc[39m:[32mb[39m -> [47m[32mc[39m[49m) : [32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\[34mb[39m [34mc[39m:[32mb[39m -> [47m[32mc[39m[49m:[32mType[39m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\[34mb[39m [34mc[39m:[32mb[39m -> \([34md[39m : [32mType~b[39m)->[47m[32mc[39m[49m} (\([32me[39m : _:'Type) -> primIfThenElse "not Bool" (Cons e Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\[34mb[39m [34mc[39m:[32mb[39m [34mb[39m:=[32mType[39m -> [47m[32mc[39m[49m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\[34mb[39m [34mb[39m:=[32mType[39m -> \[34mc[39m->[47m[32mc[39m[49m} (\([32md[39m : _:'Type) -> primIfThenElse "not Bool" (Cons d Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> [32mconcatMap a[39m {\[34mb[39m->[47m[32mb[39m[49m} (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> (\[34mb[39m -> [32mconcatMap a[39m {[47m[32mb[39m[49m}) (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m -> (\[34mb[39m -> [47m[32mconcatMap a b[39m[49m) (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [47m[32mconcatMap a b[39m[49m (\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil)) Nil)[K
check:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m ([47m(\([32mc[39m : _:'Type) -> primIfThenElse "not Bool" (Cons c Nil) Nil) :: [32ma -> 'List b[39m[49m)) Nil)[K
check:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [47mprimIfThenElse "not Bool" (Cons c Nil) Nil :: [32m'List b[39m[49m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [47mprimIfThenElse "not Bool" (Cons c Nil)[49m Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [47mprimIfThenElse "not Bool"[49m (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [47mprimIfThenElse[49m "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [47m[32mprimIfThenElse[39m[49m "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [47m[32mprimIfThenElse[39m[49m {_ : _:'Type} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
check:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {[47m(_ : _:'Type) :: [32mType[39m[49m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {([47m_ : _:'Type[49m) : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\([34md[39m : [47m_:'Type[49m)->d : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\([34me[39m : (\[34md[39m:[47m'Type[49m -> d))->e : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\([34me[39m : (\[34md[39m:[47m[32mType[39m[49m -> d))->e : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\([34me[39m : \[34md[39m->[47md[49m)->e : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\([34me[39m : \[34md[39m->[47m[32md[39m[49m)->e : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {(\[34md[39m [34me[39m:[47m[32md[39m[49m -> e) : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {(\[34md[39m [34me[39m:[32md[39m -> [47me[49m) : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {(\[34md[39m [34me[39m:[32md[39m -> [47m[32me[39m[49m) : [32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\[34md[39m [34me[39m:[32md[39m -> [47m[32me[39m[49m:[32mType[39m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\[34md[39m [34me[39m:[32md[39m -> \([34mf[39m : [32mType~d[39m)->[47m[32me[39m[49m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\[34md[39m [34me[39m:[32md[39m [34md[39m:=[32mType[39m -> [47m[32me[39m[49m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\[34md[39m [34md[39m:=[32mType[39m -> \[34me[39m->[47m[32me[39m[49m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> [32mprimIfThenElse[39m {\[34md[39m->[47m[32md[39m[49m} "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [32mprimIfThenElse[39m {[47m[32md[39m[49m}) "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [47m[32mprimIfThenElse d[39m[49m) "not Bool" (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [47m[32mprimIfThenElse d[39m[49m "not Bool") (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
check:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [32mprimIfThenElse d[39m [47m"not Bool"::[32m'Bool[39m[49m) (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
infer:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [32mprimIfThenElse d[39m [47m"not Bool"[49m:[32m'Bool[39m) (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [32mprimIfThenElse d[39m [47m[32m"not Bool"[39m[49m:[32m'Bool[39m) (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
focus:  labEnd ((\[34ma[39m [34mb[39m -> [32mconcatMap a b[39m (\[32mc[39m:[32ma[39m -> (\[34md[39m -> [32mprimIfThenElse d[39m \([34me[39m : [32m'Empty "can not unify\n\ESC[32m'Bool\ESC[m\nwith\n\ESC[32m'String\ESC[m\n"[39m)->[47m[32m"not Bool"[39m[49m) (Cons c Nil) Nil : [32m'List b[39m)) Nil)[K
!type error: can not unify
[32m'Bool[m
with
[32m'String[m

in testdata/language-features/basic-list/listcomp08.reject.lc:1:23

------------ tooltips
testdata/language-features/basic-list/listcomp08.reject.lc 1:10-1:33  V1 -> List V1
testdata/language-features/basic-list/listcomp08.reject.lc 1:23-1:33  String
