------------ desugared source code
f
  = \(a :: _) (b :: _) (c :: _) -> 'BoolCase
    \_ -> _ :: _
    ('BoolCase
      \_ -> _ :: _
      ('BoolCase \_ -> _ :: _ (_rhs undefined) (_rhs (fromInt 1)) c)
      (_rhs (fromInt 2))
      a)
    ('BoolCase
      \_ -> _ :: _
      (_rhs (fromInt 0))
      ('BoolCase \_ -> _ :: _ (_rhs (fromInt 1)) (_rhs undefined) a)
      c)
    b
g
  = \(a :: _) -> 'ListCase
    \_ -> _ :: _
    (_rhs undefined)
    \(b :: _) (c :: _) -> 'BoolCase
      \_ -> _ :: _
      (_rhs undefined)
      ('ListCase
        \_ -> _ :: _
        (_rhs undefined)
        \(d :: _) (e :: _) -> 'BoolCase
          \_ -> _ :: _
          ('ListCase
            \_ -> _ :: _
            (_rhs undefined)
            \(f :: _) (g :: _) -> 'BoolCase
              \_ -> _ :: _
              (_rhs undefined)
              ('ListCase \_ -> _ :: _ (_rhs False) \_ -> \_ -> _rhs undefined g)
              f
            e)
          (_rhs undefined)
          d
        c)
      b
    a
h
  = \(a :: _) -> 'ListCase
    \_ -> _ :: _
    (_rhs undefined)
    \(b :: _) (c :: _) -> 'ListCase
      \_ -> _ :: _
      (_rhs undefined)
      \(d :: _) (e :: _) -> 'BoolCase
        \_ -> _ :: _
        (_rhs undefined)
        ('ListCase
          \_ -> _ :: _
          ('ListCase
            \_ -> _ :: _
            (_rhs undefined)
            \(f :: _) (g :: _) -> 'ListCase
              \_ -> _ :: _
              (_rhs undefined)
              \(h :: _) (i :: _) -> 'BoolCase
                \_ -> _ :: _
                ('ListCase
                  \_ -> _ :: _
                  ('ListCase \_ -> _ :: _ (_rhs True) \_ -> \_ -> _rhs undefined g)
                  \_ -> \_ -> _rhs undefined
                  i)
                (_rhs undefined)
                h
              f
            c)
          \_ -> \_ -> _rhs undefined
          e)
        d
      b
    a
main is not found
------------ trace
f :: forall a . Num a => Bool -> Bool -> Bool -> a
g :: List Bool -> Bool
h :: List (List Bool) -> Bool
------------ tooltips
testdata/language-features/pattern/uncovered.lc 2:1-2:2
    forall a . Num a => Bool -> Bool -> Bool -> a
testdata/language-features/pattern/uncovered.lc 2:18-2:19
    _b
testdata/language-features/pattern/uncovered.lc 2:18-3:19
    Bool -> _c | _c
testdata/language-features/pattern/uncovered.lc 2:18-4:19
    Bool -> _c
testdata/language-features/pattern/uncovered.lc 3:18-3:19
    _b | _b | _b | _c
testdata/language-features/pattern/uncovered.lc 3:18-4:19
    Bool -> _c | _b
testdata/language-features/pattern/uncovered.lc 4:18-4:19
    _b
testdata/language-features/pattern/uncovered.lc 6:1-6:2
    List Bool -> Bool
testdata/language-features/pattern/uncovered.lc 6:25-6:30
    Bool | Bool | Bool | Bool | Bool | Bool | Bool
testdata/language-features/pattern/uncovered.lc 8:1-8:2
    List (List Bool) -> Bool
testdata/language-features/pattern/uncovered.lc 8:23-8:27
    Bool | Bool | Bool | Bool | Bool | Bool | Bool | Bool | Bool
------------ warnings
Uncovered pattern(s) at testdata/language-features/pattern/uncovered.lc:2:1:
f _ True False = 0
f False _ True = 1
f True False _ = 2
Missing case(s):
    f False False False
    f True True True
Uncovered pattern(s) at testdata/language-features/pattern/uncovered.lc:6:1:
g [True, False, True] = False
^
Missing case(s):
    g Nil
    g (Cons False _)
    g (Cons True Nil)
    g (Cons True (Cons False Nil))
    g (Cons True (Cons False (Cons False _)))
    g (Cons True (Cons False (Cons True (Cons _ _))))
    g (Cons True (Cons True _))
Uncovered pattern(s) at testdata/language-features/pattern/uncovered.lc:8:1:
h [[True], [False]] = True
^
Missing case(s):
    h Nil
    h (Cons Nil _)
    h (Cons (Cons False _) _)
    h (Cons (Cons True Nil) Nil)
    h (Cons (Cons True Nil) (Cons Nil _))
    h (Cons (Cons True Nil) (Cons (Cons False Nil) (Cons _ _)))
    h (Cons (Cons True Nil) (Cons (Cons False (Cons _ _)) _))
    h (Cons (Cons True Nil) (Cons (Cons True _) _))
    h (Cons (Cons True (Cons _ _)) _)