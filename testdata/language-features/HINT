  ok
  wrong

X

  syntactic
    semantic - reduced properly
      usage in values, functions, expressions, types

language features:
  done - comment
  done - language pragma
  syntax:
    reserved keywords
    done - literals
    done - tuples
    done - global value defs
    valid indentation
      done - global defs
      multiline def
      multi equation function def
      let in
      where
      case
      data def
      if then else
      list comprehension

    done - let in
    done - if then else
    done - lambda expression
    done - case of
    type signature
      done - global
      done - local
      done - type parameters
      forall
      hidden parameters
      wildcard
      context
    patterns
    guards - in expressions
      done - def
      let in
      where
      case of
    done - basic list - :[] [,,]
    done - list comprehension
    done - operators
    fixity - operators and `infix`
    done - `infix` notation 
    where - in value, in expressions
      global def
      let
      nested where
      patterns

    done - definition order
    simple recursion
      done - def
      let in
      where
      case of
    mutual recursion - vary def order, vary on def placing (insert other code between mutual rec functions"

    data GADT and ADT
    parenthesis - nested
    widcards - in pattern, in type
    @ patterns
    builtins
    records
    swizzling
    hidden parameters
    type synonyms
    @ type parameters

  module name where
    done - with and without export list
    done - including exporing itself and other imported modules
    export data with/without constructors () or (..)

  import
    done - hiding list
    done - import list
    qualified import
    qualified import as
    import as
    import data with/without constructors () or (..)
