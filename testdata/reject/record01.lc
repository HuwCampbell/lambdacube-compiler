main = let
  blendFun x = Blend x ((SrcAlpha,OneMinusSrcAlpha),(SrcAlpha,OneMinusSrcAlpha)) (V4 1.0 1.0 1.0 1.0)
  blend'' = blendFun (FuncAdd,FuncAdd)
  blend = Blend (FuncAdd,FuncAdd) ((SrcAlpha,OneMinusSrcAlpha),(SrcAlpha,OneMinusSrcAlpha)) (V4 1.0 1.0 1.0 1.0)
  blend' = NoBlending
  bgColor = V4 0.5 0.0 0.4 1.0
  bgColor' = V4 0.2 0.2 0.4 1.0
  emptyFB           = FrameBuffer (depthImage1 1000.0,colorImage1 bgColor)
  polyMode          = PolygonLine 20.0
  polyMode'         = PolygonFill
  polyMode''        = PolygonPoint (PointSize 10.0)
  cull = CullNone
  cull' = CullFront CW
  rasterCtx         = TriangleCtx cull polyMode' NoOffset FirstVertex
  fragmentCtx       = AccumulationContext (DepthOp Less True, ColorOp blend (V4 True True True True))
  modelViewProj     = Uniform "MVP" :: Mat 4 4 Float
  vertexShader v    = VertexOut (PrimMulMatVec modelViewProj v) 1.0 () (Smooth v)
  vertexStream      = fetch "stream" Triangle (Attribute "position" :: Vec 4 Float)
  primitiveStream   = Transform vertexShader vertexStream
  fragmentStream    = Rasterize rasterCtx primitiveStream
  fragmentShader' = FragmentShaderRastDepth $ \v -> (V4 1.0 0.4 0.0 0.2)
  fragmentShader = FragmentShaderRastDepth $ \v -> (PrimMul v (V4 1.0 0.4 0.0 0.2))
  frame             = accumulate fragmentCtx PassAll fragmentShader fragmentStream emptyFB
  record = {fieldA: 1.0, fieldB: frame, fieldC: blendFun}
  field = record.fieldA
 in ScreenOut record.fieldA
