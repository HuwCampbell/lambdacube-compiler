
Done:

-   pattern match compiler prototípus
    -   beépítve a korábbi fordítóba
-   IORef-es/STRef-es kiértékelő
    ->  ennek a használata elbonyolítaná az implementációt:
        -   mindent monadikussá kellene tenni, ez különösen fájdalmas mintaillesztéskor
        -   plusz típusváltozó minden típuban / vagy IO mindenhol
        -   explicit sharing mindenhol
-   tiszta hatékony interpreter + típusellenőrző függő típusozáshoz
    -   tiszta, a Haskell lusta kiértékelését használja sharingre
    -   külön kiértékelő típusozás közben és típusozás után a hatékonyság növelésére
    -   type erasure a hatékonyság növelésére (az dep. type ellensúlyozására)
    -   memory leak ellen védett De Bruijn változók
    -   a kifejezésektől különválasztott típus a hatékonyság növelésére
    -   többszöri próbálkozás az beépítésre az előző fordítóba
        még meglévő különbségek:
        -   nincs különválasztva a típusozás közbeni és utáni kiértékelés
        -   globális nevek vs. De Bruijn
        -   ad-hoc rejtett argumentumok (működnek vele a dep. rekordokkal emulált típusosztályok)
        -   ad-hoc RankNTypes (magic, valahogy működnek vele a dep. rekordokkal emulált típusosztályok)
        -   ad-hoc type erasure (megy konstruktorokra, nem megy a felhasználó által definiált kifejezésekre)
        -   nincs különválasztva a típus
        -   a kompozícionális típusozó nem tudja felhasználni a típusban megadott segítséget
            -   ez kizárja pl. RankNType-ot, és a függő típusozást
            -   a meglévő példákhoz nem kellett, összetettebb dep. rekordos típusosztályoknál kritikus lehet
-   típusozó prototípus
    -   irányított (figyelembe veszi a megadott típusokat)
    -   dependens
    -   rejtett argumentumok
    -   RankNTypes
    -   pattern matching compiler beépítése
    -   több implementáció kipróbálása, a legutolsó zippereket használ
        -   könyebb debugolás
        -   eddigi leghatékonyabb
        -   kicsi implementáció, és bővíthetőnek is látszik
    -   címkézés a jobb mintaillesztés támogatáshoz

összefoglaló TODO lista

fő tennivaló: a típusozó kiegészítése
-   syntactic sugars
-   type classes as a syntax sugar
    -   egyszerűbb, átlátható szemantika
        -   könnyebb a más nyelvi elemekkel való viszonyát tisztázni
    -   modulárisabb implementáció
        -   könnyebben karbantartható
        -   könnyebben tesztelhető implementáció
-   teljesítmény javítás, több check


-------------------------------------------------------------------------------- short-term TODOs

-   row polymorphism
-   swizzling

-   complete let polymorphism
-   Unit ambiguity
-   guards + where

-   (a ~ b) + (a ~ c)
-   recheck should not fail - coe missing?

-   labels for corecursion; fix loop
        example08 - looping error message
        primes
        recursivetexture01
        record02

        reduce04

-------------------------------------------------------------------------------- TODOs after 100% tests (completion & cleanup)

-   record filed name handling
-   constructor operator fixities (also in patterns)

-   data Wrong = Wrong a

-   basic refactoring

-   de-brunify move away from parser? / refactoring

-   ambiguity check
    -   suppress univ. polymorphic ambiguity
    -   konstans megadott típus szigorúan vétele
    -   prohibit constraints like    a ~ List a,  a ~ a -> a, etc.

-   bug fix (as needed)
    -   (~) :: forall a b . a -> b -> Type                ?
    -   bug: head <-> tail  csere nem jelez hibát, viszont recheck fails
    -   coe korrektebb használata (másmikor kell beszúrni)   ?
    -   app típusozás jobban


-------------------------------------------------------------------------------- medium-term TODOs

-   performance
    -   típus-érték különválasztás (vs. church style lambda)
        -   lam változó típusának kitörlése
                    expType
                    recheck
                    envDoc, expDoc
                    cstr
                    foldE ?
        -   neutrális termek külön
        -   konstruktorok univ. pol. típusainak kitörlése
    -   irrelevance + erasure
    -   max. De Bruijn index számolás

    -   ügyesebb De Bruijn (kitörlős)
    -   interpretált De Bruijn
    -   coe / type class irrelevance switch

-   type classes
    -   generate type-case functions
    -   class parse + desugaring
    -   instance parse (drop it first)
    -   type class desugaring
    -   super class "visszaállítás"
    -   Constraint type: uniqueness of witnesses 0-1 elemű típusokra

-   injektivitás inferencia

-   open functions, type families syntax

-   jobb hibaüzenetek
    -   jobb normalizáció elkerülés (String => [Char] lehetőleg ne)
    -   location infó
    -   kompozícionálisabb inference?

-   dep. pattern matching
-   evalXXX deriválás

-   frekvenciák

-   separate LambdaCube 3D specific parts

-------------------------------------------------------------------------------- cleanup after medium-term TODOs

-   huge refactoring, documentation, test cases, ...

milestone: 1.0 compiler


-------------------------------------------------------------------------------- notes
--------------------------------------------------------------------------------

-------------------------------------------------------------------------------- row polymorphism

builtins
    Split :: Type -> Type -> Type -> Constraint --Type


data RecordC (xs :: List (Pair String Type))
    = RecordCons (tuptype (map snd xs))

tuptype [] = ()
tuptype (x: xs) = (x,  tuptype xs)

Record :: List (Pair String Type) -> Type
Record xs = RecordC (sortBy fst xs)

builtins
    project :: forall (xs :: List [(String, Type)]) . (s :: String) -> (Split (RecordC xs) (RecordC [(s, a)] b) -> RecordC xs -> a

-- project = ...


w :: Split a b c
 iff
a = Record as
b = Record bs
c = Record cs

bs `sublist` as
cs `sublist` as
map fst bs  `disjunct`  map fst cs


 :: Record {x: Float}


v1 :: Record {x: Float, y: Float, z: Float}
v1 = {x: 1.0, y: 2.0, z: 3.0}                   ----> RecordCons @[("x", _), ("y", _), ("z", _)] (1.0, (2.0, (3.0, ())))
v2 = {x: 1.0, y: 2.0, z: 3.0, a: 4.0}

f :: (Split a (Record {x: Float, y: Float}) b) => a -> Float
f v = v.x +! v.y

r = f v1 +! f v2    -- this is valid


        exp.field      ----->           project field exp

f v1           --        a ~ Record {x: Float, y: Float, z: Float}


    eval
        Split (Record xs) (Record ys) c    = eval $   c ~ Record (xs \\ ys)
        Split (Record xs) c (Record ys)    = eval $   c ~ Record (xs \\ ys)
        Split a (Record xs) (Record ys)    = eval $   a ~ Record (xs ++ ys)


